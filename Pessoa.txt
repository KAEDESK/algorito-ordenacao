import java.text.DecimalFormat;
import java.util.Random;

public class Pessoa {
    public String nome;
    public int idade;
    public double altura;
    
    DecimalFormat df = new DecimalFormat();

    public Pessoa() {
    }

    public Pessoa(String nome, int idade, double altura) {
        this.nome = nome;
        this.idade = idade;
        this.altura = altura;
    }

    public int compare(Pessoa p, int atributo) {
        switch (atributo) {
            case 0:
                return this.nome.compareTo(p.nome);
            case 1:
                return Integer.compare(this.idade, p.idade);
            case 2:
                return Double.compare(this.altura, p.altura);
            default:
                throw new IllegalArgumentException("Atributo invalido %.2f");
        }
    }

    public static Pessoa[] criarPessoas() {
        String[] nomes = {"Ellen Ripley", "Luke Skywalker", "James T. Kirk", "Mark Watney",
                "Paul Atreides", "Neo", "Mr. Robot", "Tony Stark", "Sarah Connor", "Dr. Emmett Brown"};
        Random random = new Random();
        Pessoa[] pessoas = new Pessoa[10];
        for (int i = 0; i < pessoas.length; i++) {
            pessoas[i] = new Pessoa(nomes[i], random.nextInt(100), random.nextDouble() * 2 + 1); // Idade ate 99, altura entre 1 e 3 metros
        }
        return pessoas;
    }

    public static void bubbleSort(Pessoa[] pessoas, int atributo) {
        int n = pessoas.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (pessoas[j].compare(pessoas[j + 1], atributo) > 0) {
                    Pessoa temp = pessoas[j];
                    pessoas[j] = pessoas[j + 1];
                    pessoas[j + 1] = temp;
                }
            }
        }
    }

    public static void selectionSort(Pessoa[] pessoas, int atributo) {
        int n = pessoas.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (pessoas[j].compare(pessoas[minIndex], atributo) < 0) {
                    minIndex = j;
                }
            }
            Pessoa temp = pessoas[minIndex];
            pessoas[minIndex] = pessoas[i];
            pessoas[i] = temp;
        }
    }

    public static void insertionSort(Pessoa[] pessoas, int atributo) {
        int n = pessoas.length;
        for (int i = 1; i < n; i++) {
            Pessoa key = pessoas[i];
            int j = i - 1;
            while (j >= 0 && pessoas[j].compare(key, atributo) > 0) {
                pessoas[j + 1] = pessoas[j];
                j = j - 1;
            }
            pessoas[j + 1] = key;
        }
    }

    public static void quickSort(Pessoa[] pessoas, int atributo, int low, int high) {
        if (low < high) {
            int pi = partition(pessoas, atributo, low, high);
            quickSort(pessoas, atributo, low, pi - 1);
            quickSort(pessoas, atributo, pi + 1, high);
        }
    }

    private static int partition(Pessoa[] pessoas, int atributo, int low, int high) {
        Pessoa pivot = pessoas[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (pessoas[j].compare(pivot, atributo) < 0) {
                i++;
                Pessoa temp = pessoas[i];
                pessoas[i] = pessoas[j];
                pessoas[j] = temp;
            }
        }
        Pessoa temp = pessoas[i + 1];
        pessoas[i + 1] = pessoas[high];
        pessoas[high] = temp;
        return i + 1;
    }

    public static void main(String[] args) {
        Pessoa[] pessoas = Pessoa.criarPessoas();

        System.out.println("Ordenacao por nome (Bubble Sort):");
        Pessoa.bubbleSort(pessoas, 0);
        for (Pessoa pessoa : pessoas) {
            System.out.println(pessoa.nome);
        }

        System.out.println("\nOrdenacao por idade (Selection Sort):");
        Pessoa.selectionSort(pessoas, 1);
        for (Pessoa pessoa : pessoas) {
            System.out.println(pessoa.nome + " - " + pessoa.idade);
        }
        
        
        System.out.println("\nOrdenacao por altura (Insertion Sort):");
        Pessoa.insertionSort(pessoas, 2);
        for (Pessoa pessoa : pessoas) {
            System.out.println(pessoa.nome + " - "+ new DecimalFormat(".##").format(pessoa.altura));
        }

        System.out.println("\nOrdenacao por nome (Quick Sort):");
        Pessoa.quickSort(pessoas, 0, 0, pessoas.length - 1);
        for (Pessoa pessoa : pessoas) {
            System.out.println(pessoa.nome);
        }
    }
}